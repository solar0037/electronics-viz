import streamlit as st
import schemdraw
from schemdraw import elements as elm
import matplotlib.pyplot as plt

st.title("Common Source Amplifier")

with schemdraw.Drawing() as d:
    v_sig = elm.SourceV().label('$v_{sig}$')
    elm.Ground().at(v_sig.start)
    R_sig = elm.Resistor().right().at(v_sig.end).label('$R_{sig}$')
    elm.Dot(open=True)
    elm.Gap().down().label(['+','$v_i$','-'])
    C_C1 = elm.Capacitor().right().at(R_sig.end).label('$C_{C1}$')
    elm.ZLabel().at(C_C1.end).label('$R_{in}$')
    L11 = elm.Line().up(d.unit/3)
    R_G1 = elm.Resistor().up().at(L11.end).label('$R_{G1}$')
    elm.Arrow().up(d.unit/4)
    L12 = elm.Line().down(d.unit/4).at(C_C1.end)
    R_G2 = elm.Resistor().down().at(L12.end).label('$R_{G2}$')
    elm.Ground().at(R_G2.end)
    L2 = elm.Line().right(d.unit/4).at(C_C1.end)
    NFet = elm.AnalogNFet().anchor('gate').reverse().right().at((L2.end))
    R_D = elm.Resistor().up().at(NFet.drain).label('$R_D$')
    elm.Arrow().up(d.unit/5).label('$V_{DD}$')
    R_S = elm.Resistor().down().at(NFet.source).label('$R_S$')
    elm.Ground().at(R_S.end)
    C_C2 = elm.Capacitor().right().at(NFet.drain).label('$C_{C2}$').dot(open=True)
    elm.ZLabel().at(C_C2).label('$R_{o}$')
    elm.Line().right(d.unit/4)
    R_L = elm.Resistor().down().label('$R_L$')
    elm.Line().right(d.unit/2).at(R_L.start).dot(open=True)
    elm.Gap().down().label(['+','$v_o$','-'])
    elm.Ground().at(R_L.end)
    L3 = elm.Line().right(d.unit/2).at(NFet.source)
    C_s = elm.Capacitor().down().at(L3.end).label('$C_{s}$')
    elm.Ground().at(C_s.end)

d.draw()
st.pyplot(plt.gcf())

k_n = 8e-3
V_OV = 0.25
g_m = k_n*V_OV
R_D = 10e3
R_L = st.slider(r'$R_L (Î©)$', 1e3, 100e3)
st.write(r'$G_{v} \equiv -g_m(R_D||R_L) = ' + f'{-g_m*(R_D*R_L)/(R_D+R_L):.2f}' + r'(\mathrm V/\mathrm V)$')

with schemdraw.Drawing() as d:
    L11 = elm.Line().up(d.unit/3)
    R_G1 = elm.Resistor().up().at(L11.end).label('$R_{G1}$')
    elm.Arrow().up(d.unit/4)
    L12 = elm.Line().down(d.unit/4).at(L11.start)
    R_G2 = elm.Resistor().down().at(L12.end).label('$R_{G2}$')
    elm.Ground().at(R_G2.end)
    L2 = elm.Line().right().at(L11.start)
    NFet = elm.AnalogNFet().anchor('gate').reverse().right().at((L2.end))
    R_D = elm.Resistor().up().at(NFet.drain).label('$R_D$')
    elm.Arrow().up(d.unit/5).label('$V_{DD}$')
    R_S = elm.Resistor().down().at(NFet.source).label('$R_S$')
    elm.Ground().at(R_S.end)

d.draw()
st.header('DC Analysis')
st.pyplot(plt.gcf())

with schemdraw.Drawing() as d:
    v_sig = elm.SourceV().label('$v_{sig}$')
    elm.Ground().at(v_sig.start)
    R_sig = elm.Resistor().right().at(v_sig.end).label('$R_{sig}$')
    elm.Dot(open=True)
    elm.Gap().down().label(['+','$v_i$','-'])
    elm.Line().right(d.unit/4).at(R_sig.end)
    R_G1 = elm.Resistor().down().label('$R_{G1}$', loc='bot')
    elm.Ground()
    L_R_G1 = elm.Line().right(d.unit/2).at(R_G1.start)
    R_G2 = elm.Resistor().down().at(L_R_G1.end).label('$R_{G2}$', loc='bot')
    elm.Ground()
    L_R_G2 = elm.Line().right(d.unit/2).at(R_G2.start)
    G = elm.Line().right(d.unit/2).dot(open=True).at(L_R_G2.end)
    elm.Label('G').at(G.start)
    elm.Dot(open=True).at(G.start)
    elm.Gap().down().label(['+','$v_{gs}$','-']).at(G.end)
    S = elm.Line().at((G.end[0], G.end[1]-d.unit)).right(d.unit*1.5)
    Ss = elm.Line().down(d.unit/4).at((S.start[0]+d.unit*0.5, S.start[1])).dot(open=True)
    elm.Line().down(d.unit/4)
    elm.Ground()
    elm.Label('S').at(Ss.end)
    elm.Dot(open=True).at(S.start)
    elm.Dot(open=True).at(Ss.end)
    VCCS = elm.SourceControlledI().at((S.end[0]-d.unit/2, S.end[1]+d.unit)).down().label(r'$g_{m}v_{gs}$')
    L_VCCS = elm.Line().right(d.unit/2).at(VCCS.start)
    r_o = elm.Resistor().down().label('$r_o$', loc='bot')
    D = elm.Line().right(d.unit/2).at(r_o.start).dot(open=True)
    elm.Label('D').at(D.end)
    elm.Line().right(d.unit/4)
    R_D = elm.Resistor().down().label('$R_D$')
    elm.Ground()
    elm.Line().right(d.unit/2).at(R_D.start).dot(open=True)
    R_L = elm.Resistor().down().label('$R_L$')
    elm.Ground()
    elm.Line().right(d.unit/2).at(R_L.start).dot(open=True)
    elm.Gap().down().label(['+','$v_o$','-'])

d.draw()
st.header('Signal Analysis')
st.pyplot(plt.gcf())
